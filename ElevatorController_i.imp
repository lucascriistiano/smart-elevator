/* ElevatorController_i
 * Author: Lucas Cristiano
 * Creation date: 27/06/2017
 */

IMPLEMENTATION
    ElevatorController_i

REFINES
    ElevatorController    

SEES
    Elevator_ctx, People_ctx, OperationResult_ctx
    
IMPORTS
    IdChecker, PeopleInfo
    
PROMOTES
    idchecker_check_floor_authorization,
    peopleinfo_query_weight

CONCRETE_VARIABLES
    current_floor_i,
    elevator_weight_i,
    internal_door_state_i,
    floor_door_state_i,
    elevator_people_i,
    choosen_elevator_i,
    origin_floor_i,
    destination_floor_i,
    elevator_floor_sequence_i,
    elevator_floor_sequence_start_i,
    elevator_floor_sequence_end_i,
    elevator_floor_sequence_size_i
    
INVARIANT
    current_floor_i: (0..ELEVATOR_LIMIT) --> (0..TOP_FLOOR)
    & elevator_weight_i: (0..ELEVATOR_LIMIT) --> NAT
    & internal_door_state_i: (0..ELEVATOR_LIMIT) --> DOOR_STATE
    & floor_door_state_i: ((0..TOP_FLOOR) * (0..ELEVATOR_LIMIT)) --> DOOR_STATE
    & elevator_people_i: ((0..ELEVATOR_LIMIT) * (0..PEOPLE_LIMIT)) --> BOOL
    & choosen_elevator_i: ((0..PEOPLE_LIMIT) * (0..ELEVATOR_LIMIT)) --> BOOL
    & origin_floor_i: ((0..PEOPLE_LIMIT) * (0..TOP_FLOOR)) --> BOOL
    & destination_floor_i: ((0..PEOPLE_LIMIT) * (0..TOP_FLOOR)) --> BOOL
    & elevator_floor_sequence_i: (0..ELEVATOR_LIMIT) --> (0..TOP_FLOOR)
    & elevator_floor_sequence_start_i: (0..ELEVATOR_LIMIT) --> NAT
    & elevator_floor_sequence_end_i: (0..ELEVATOR_LIMIT) --> NAT
    & elevator_floor_sequence_size_i: (0..ELEVATOR_LIMIT) --> NAT
    
    //invariantes de ligacao
//    & dom(elevator_people) = dom(elevator_people_i)
//    & ran(elevator_people) = ran(ran(elevator_people_i))
    
INITIALISATION
    current_floor_i := (0..ELEVATOR_LIMIT) * { GROUND_FLOOR };
    elevator_weight_i := (0..ELEVATOR_LIMIT) * { 0 };
    internal_door_state_i := (0..ELEVATOR_LIMIT) * { CLOSED };
    floor_door_state_i := ((0..TOP_FLOOR) * (0..ELEVATOR_LIMIT)) * { CLOSED };
    elevator_people_i := ((0..ELEVATOR_LIMIT) * (0..PEOPLE_LIMIT)) * { FALSE };
    choosen_elevator_i := ((0..PEOPLE_LIMIT) * (0..ELEVATOR_LIMIT)) * { FALSE };
    origin_floor_i := ((0..PEOPLE_LIMIT) * (0..TOP_FLOOR)) * { FALSE };
    destination_floor_i := ((0..PEOPLE_LIMIT) * (0..TOP_FLOOR)) * { FALSE };
    elevator_floor_sequence_i := (0..ELEVATOR_LIMIT) * { GROUND_FLOOR };
    elevator_floor_sequence_start_i := (0..ELEVATOR_LIMIT) * { 0 };
    elevator_floor_sequence_end_i := (0..ELEVATOR_LIMIT) * { 0 };
    elevator_floor_sequence_size_i := (0..ELEVATOR_LIMIT) * { 0 }

OPERATIONS
    
    ff, res <-- elev_current_floor(ee) =
        BEGIN
            IF ee >= 0 & ee <= ELEVATOR_LIMIT
            THEN
                ff := current_floor_i(ee);
                res := SUCCESS
            ELSE
                ff := 0;
                res := ERROR
            END
        END;
        
    ww, res <-- elev_current_weight(ee) =
        BEGIN
            IF ee >= 0 & ee <= ELEVATOR_LIMIT
            THEN
                ww := elevator_weight_i(ee);
                res := SUCCESS
            ELSE
                ww := 0;
                res := ERROR
            END
        END;
        
    ss, res <-- elev_door_state(ee) =
        BEGIN
            IF ee >= 0 & ee <= ELEVATOR_LIMIT
            THEN
                ss := internal_door_state_i(ee);
                res := SUCCESS
            ELSE
                ss := OPEN;
                res := ERROR
            END
        END;

    dir, state, res <-- elev_direction(ee) =
        BEGIN
            IF ee >= 0 & ee <= ELEVATOR_LIMIT
            THEN
                VAR sz IN
                    sz := elevator_floor_sequence_size_i(ee);
                    IF sz > 0 //sequencia nao vazia
                    THEN
                        VAR ss, ff, st IN
                            ss := elevator_floor_sequence_start_i(ee);
                            ff := current_floor_i(ee);
                            st := elevator_floor_sequence_i(ss);
                            IF ff > st
                            THEN
                                dir := DOWN
                            ELSIF ff < st
                            THEN
                                dir := UP
                            ELSE
                                dir := NONE
                            END;
                            state := ATTENDING
                        END
                    ELSE
                        dir := NONE;
                        state := FREE
                    END;
                    res := SUCCESS
                END
            ELSE
                dir := NONE;
                state := ATTENDING;
                res := ERROR
            END
        END;

    elnum, res <-- elev_call_elevator(user, call_floor, dest_floor) =
        BEGIN
            IF
                call_floor >= 0 & call_floor <= TOP_FLOOR
                & dest_floor >= 0 & dest_floor <= TOP_FLOOR
                & user >= 0 & user <= PEOPLE_LIMIT
                & call_floor /= dest_floor
//                & dest_floor: authorized_floors(user)
//                & user /: dom(choosen_elevator)
//                & user /: dom(destination_floor)
            THEN
                elnum := 0;
                res := SUCCESS
//                IF call_floor < dest_floor
//                THEN
//                    //usuario indo para cima
//                    IF bool(#ee.(
//                            ee: ELEVATOR
//                            & elevator_floor_sequence(ee) /= {}
//                            & current_floor(ee) < first(elevator_floor_sequence(ee)) //elevador esta subindo
//                            & call_floor >= current_floor(ee)
////                            & dest_floor <= first(elevator_floor_sequence(ee))
//                            & dest_floor <= last(elevator_floor_sequence(ee))
//                            //peso atual + soma do peso de quem vai entrar antes ou no piso - soma do peso de quem vai sair antes ou no piso
//                            & (elevator_weight(ee)
//                                + SIGMA uu.(uu: PEOPLE & uu: dom(choosen_elevator |> {ee}) & origin_floor(uu) <= call_floor | people_weight(uu))
//                                - SIGMA uu.(uu: PEOPLE & uu: dom(choosen_elevator |> {ee}) & destination_floor(uu) <= call_floor | people_weight(uu)))
//                                    <= WEIGHT_LIMIT)) = TRUE
//                    THEN
//                        //existe um elevador otimizado para subir
//                        ANY ee
//                        WHERE
//                            ee: ELEVATOR
//                            & elevator_floor_sequence(ee) /= {}
//                            & current_floor(ee) < first(elevator_floor_sequence(ee)) //elevador esta subindo
//                            & call_floor >= current_floor(ee)
////                            & dest_floor <= first(elevator_floor_sequence(ee))
//                            & dest_floor <= last(elevator_floor_sequence(ee))
//                            //peso atual + soma do peso de quem vai entrar antes ou no piso - soma do peso de quem vai sair antes ou no piso
//                            & (elevator_weight(ee)
//                                + SIGMA uu.(uu: PEOPLE & uu: dom(choosen_elevator |> {ee}) & origin_floor(uu) <= call_floor | people_weight(uu))
//                                - SIGMA uu.(uu: PEOPLE & uu: dom(choosen_elevator |> {ee}) & destination_floor(uu) <= call_floor | people_weight(uu)))
//                                    <= WEIGHT_LIMIT
//                        THEN
//                            choosen_elevator(user) := ee;
//                             origin_floor(user) := call_floor
//                            || destination_floor(user) := dest_floor
//                            || elnum := ee
//                            || res := SUCCESS
//                        END
//
//                    ELSIF bool(#ee.(
//                               ee: ELEVATOR
//                               & elevator_floor_sequence(ee) = {})) = TRUE
//                    THEN
//                        //existe um elevador livre
//                        ANY ee
//                        WHERE
//                            ee: ELEVATOR
//                            & elevator_floor_sequence(ee) = {}
//                        THEN
//                            elevator_floor_sequence(ee) := elevator_floor_sequence(ee) ^ [ call_floor, dest_floor ]
//                            || choosen_elevator(user) := ee
//                            || origin_floor(user) := call_floor
//                            || destination_floor(user) := dest_floor
//                            || elnum := ee
//                            || res := SUCCESS
//                        END
//
//                    ELSE
//                        //nao existe um elevador otimizado para subir
//                        elnum := 0
//                        || res := ERROR
//                    END
//                ELSE
//                    //usuario indo para baixo
//                    IF bool(#ee.(
//                            ee: ELEVATOR
//                            & elevator_floor_sequence(ee) /= {}
//                            & current_floor(ee) > first(elevator_floor_sequence(ee)) //elevador esta descendo
//                            & call_floor <= current_floor(ee)
////                            & dest_floor >= first(elevator_floor_sequence(ee))
//                            & dest_floor >= last(elevator_floor_sequence(ee))
//                            //peso atual + soma do peso de quem vai entrar antes ou no piso - soma do peso de quem vai sair antes ou no piso
//                            & (elevator_weight(ee)
//                                + SIGMA uu.(uu: PEOPLE & uu: dom(choosen_elevator |> {ee}) & origin_floor(uu) >= call_floor | people_weight(uu))
//                                - SIGMA uu.(uu: PEOPLE & uu: dom(choosen_elevator |> {ee}) & destination_floor(uu) >= call_floor | people_weight(uu)))
//                                    <= WEIGHT_LIMIT)) = TRUE
//                    THEN
//                        //existe um elevador otimizado para descer
//                        ANY ee
//                        WHERE
//                            ee: ELEVATOR
//                            & elevator_floor_sequence(ee) /= {}
//                            & current_floor(ee) > first(elevator_floor_sequence(ee)) //elevador esta descendo
//                            & call_floor <= current_floor(ee)
////                            & dest_floor >= first(elevator_floor_sequence(ee))
//                            & dest_floor >= last(elevator_floor_sequence(ee))
//                            //peso atual + soma do peso de quem vai entrar antes ou no piso - soma do peso de quem vai sair antes ou no piso
//                            & (elevator_weight(ee)
//                                + SIGMA uu.(uu: PEOPLE & uu: dom(choosen_elevator |> {ee}) & origin_floor(uu) >= call_floor | people_weight(uu))
//                                - SIGMA uu.(uu: PEOPLE & uu: dom(choosen_elevator |> {ee}) & destination_floor(uu) >= call_floor | people_weight(uu)))
//                                    <= WEIGHT_LIMIT
//                        THEN
//                            choosen_elevator(user) := ee
//                            || origin_floor(user) := call_floor
//                            || destination_floor(user) := dest_floor
//                            || elnum := ee
//                            || res := SUCCESS
//                        END
//
//                    ELSIF bool(#ee.(
//                               ee: ELEVATOR
//                               & elevator_floor_sequence(ee) /= {})) = TRUE
//                    THEN
//                        //existe um elevador livre
//                        ANY ee
//                        WHERE
//                            ee: ELEVATOR
//                            & elevator_floor_sequence(ee) /= {}
//                        THEN
//                            elevator_floor_sequence(ee) := elevator_floor_sequence(ee) ^ [ call_floor, dest_floor ]
//                            || choosen_elevator(user) := ee
//                            || origin_floor(user) := call_floor
//                            || destination_floor(user) := dest_floor
//                            || elnum := ee
//                            || res := SUCCESS
//                        END
//
//                    ELSE
//                        //nao existe um elevador otimizado para descer
//                        elnum := 0
//                        || res := ERROR
//                    END
//                END
            ELSE
                //nao atende ifs da precondicao
                elnum := 0;
                res := ERROR
            END
        END;

    res <-- elev_open_door(ee, ff) =
        BEGIN
            VAR ids, fds, cur_ff IN
                ids := internal_door_state_i(ee);
                fds := floor_door_state_i(ff, ee);
                cur_ff := current_floor_i(ee);
                IF
                    ee >= 0 & ee <= ELEVATOR_LIMIT
                    & ff >= 0 & ff <= TOP_FLOOR
                    & ids = CLOSED
                    & fds = CLOSED
                    & cur_ff = ff
    //                & (ff: ran(elevator_people(ee) <| destination_floor) //existe alguem para descer no andar
    //                    or
    //                   ff: ran(dom(choosen_elevator |> {ee}) <| origin_floor)) //existe alguem para subir no andar
                THEN
                    internal_door_state_i(ee) := OPEN;
                    floor_door_state_i(ff, ee) := OPEN;
                    res := SUCCESS
                ELSE
                    res := ERROR
                END
            END
        END;

     res <-- elev_close_door(ee, ff) =
        BEGIN
            VAR ids, fds, cur_ff, ew IN
                ids := internal_door_state_i(ee);
                fds := floor_door_state_i(ff, ee);
                cur_ff := current_floor_i(ee);
                ew := elevator_weight_i(ee);
                IF
                    ee >= 0 & ee <= ELEVATOR_LIMIT
                    & ff >= 0 & ff <= TOP_FLOOR
                    & ids = OPEN
                    & fds = OPEN
                    & cur_ff = ff
                    & ew <= WEIGHT_LIMIT
    //                & !uu.(uu: elevator_people(ee) => destination_floor(uu) /= ff)
    //                & !uu.(uu: dom(choosen_elevator) => ((choosen_elevator(uu) = ee & origin_floor(uu) = current_floor(ee)) => uu: elevator_people(ee)))
                THEN
                    internal_door_state_i(ee) := CLOSED;
                    floor_door_state_i(ff, ee) := CLOSED;
                    VAR ss, cur_ff, st, sz IN
                        ss := elevator_floor_sequence_start_i(ee);
                        cur_ff := current_floor_i(ee);
                        st := elevator_floor_sequence_i(ss);
                        sz := elevator_floor_sequence_size_i(ee);
                        IF cur_ff = st  //TODO Check
                        THEN
                            VAR ii IN
                                ii := st + 1;
                                elevator_floor_sequence_start_i(ee) := ii mod ELEVATOR_LIMIT;
                                elevator_floor_sequence_size_i(ee) := sz + 1
                            END
                        END
                    END;
                    res := SUCCESS
                ELSE
                    res := ERROR
                END
            END
        END;

    res <-- elev_enter(uu, ee) =
        BEGIN
            VAR ff, ew, pw, rr, ids, fds, ep, w_sum, ch_elev, or_ff IN
                ff := current_floor_i(ee);
                ew := elevator_weight_i(ee);
                pw, rr <-- peopleinfo_query_weight(uu);
                ids := internal_door_state_i(ee);
                fds := floor_door_state_i(ff, ee);
                ep := elevator_people_i(ee, uu);
                w_sum := ew + pw;
                ch_elev := choosen_elevator_i(uu, ee);
                or_ff := origin_floor_i(uu, ff);
                IF
                    ee >= 0 & ee <= ELEVATOR_LIMIT
                    & uu >= 0 & uu <= PEOPLE_LIMIT
                    & ids = OPEN
                    & fds = OPEN
                    & ep = FALSE
                    & w_sum <= WEIGHT_LIMIT  //TODO Check
                    & ch_elev = TRUE
                    & or_ff = TRUE 
                THEN
                    elevator_people_i(ee, uu) := TRUE;
                    elevator_weight_i(ee) := ew + pw;
                    choosen_elevator_i(uu, ee) := FALSE;
                    origin_floor_i(uu, ff) := FALSE;
                    res := SUCCESS
                ELSE
                    res := ERROR
                END
            END
        END;

    res <-- elev_exit(uu, ee) =
        BEGIN
            VAR ff, ew, pw, rr, ids, fds, ep, dest_ff IN
                ff := current_floor_i(ee);
                ew := elevator_weight_i(ee);
                pw, rr <-- peopleinfo_query_weight(uu);
                ids := internal_door_state_i(ee);
                fds := floor_door_state_i(ff, ee);
                ep := elevator_people_i(ee, uu);
                dest_ff := destination_floor_i(uu, ff);
                IF
                    ee >= 0 & ee <= ELEVATOR_LIMIT
                    & uu >= 0 & uu <= PEOPLE_LIMIT
                    & ids = OPEN
                    & fds = OPEN
                    & ep = TRUE
                    & dest_ff = TRUE
                THEN
                    elevator_people_i(ee, uu) := FALSE;
                    elevator_weight_i(ee) := ew - pw;
                    destination_floor_i(uu, ff) := FALSE;
                    res := SUCCESS
                ELSE
                    res := ERROR
                END
            END
        END;

    res <-- elev_go_up(ee) =
        BEGIN
            VAR ss, ff, sz, cur_ff, st, ids, fds IN
                ss := elevator_floor_sequence_start_i(ee);
                ff := current_floor_i(ee);
                sz := elevator_floor_sequence_size_i(ee);
                cur_ff := current_floor_i(ee);
                st := elevator_floor_sequence_i(ss);
                ids := internal_door_state_i(ee);
                fds := floor_door_state_i(ff, ee);
                IF
                    ee >= 0 & ee <= ELEVATOR_LIMIT
                    & sz > 0
                    & cur_ff < st
                    & cur_ff < TOP_FLOOR
                    & ids = CLOSED
                    & fds = CLOSED
//                    & current_floor(ee) /: ran(elevator_people(ee) <| destination_floor)
//                    & current_floor(ee) /: ran(dom(choosen_elevator |> {ee}) <| origin_floor)
                THEN
                    current_floor_i(ee) := ff + 1;
    //                || IF current_floor(ee) + 1 /: ran(elevator_people(ee) <| destination_floor)
    //                      & current_floor(ee) + 1 /: ran(dom(choosen_elevator |> {ee}) <| origin_floor)
    //                      & current_floor(ee) + 1 = first(elevator_floor_sequence(ee))  //nao tem ninguem pra descer ou subir no andar seguinte, entao remove da lista
    //                   THEN
    //                       elevator_floor_sequence(ee) := tail(elevator_floor_sequence(ee))
    //                   END
                    res := SUCCESS
                ELSE
                    res := ERROR
                END
            END
        END;

    res <-- elev_go_down(ee) =
        BEGIN
            VAR ss, ff, sz, st, cur_ff, ids, fds IN
                ss := elevator_floor_sequence_start_i(ee);
                ff := current_floor_i(ee);
                sz := elevator_floor_sequence_size_i(ee);
                cur_ff := current_floor_i(ee);
                st := elevator_floor_sequence_i(ss);
                ids := internal_door_state_i(ee);
                fds := floor_door_state_i(ff, ee);
                IF
                    ee >= 0 & ee <= ELEVATOR_LIMIT
                    & sz > 0
                    & cur_ff > st
                    & cur_ff > GROUND_FLOOR
                    & ids = CLOSED
                    & fds = CLOSED
//                    & current_floor(ee) /: ran(elevator_people(ee) <| destination_floor)
//                    & current_floor(ee) /: ran(dom(choosen_elevator |> {ee}) <| origin_floor)
                THEN
                    current_floor_i(ee) := ff - 1;
    //                || IF current_floor(ee) - 1 /: ran(elevator_people(ee) <| destination_floor)
    //                      & current_floor(ee) - 1 /: ran(dom(choosen_elevator |> {ee}) <| origin_floor)
    //                      & current_floor(ee) - 1 = first(elevator_floor_sequence(ee))  //nao tem ninguem pra descer ou subir no andar seguinte, entao remove da lista
    //                   THEN
    //                       elevator_floor_sequence(ee) := tail(elevator_floor_sequence(ee))
    //                   END
                    res := SUCCESS
                ELSE
                    res := ERROR
                END
            END
        END;
    
    res <-- peopleinfo_set_weight_roubust(uu, ww) =
        BEGIN
            IF
                uu >= 0 & uu <= PEOPLE_LIMIT
                & ww > 0
//                & loop para ver que em todo ee elevator_people_i(ee, uu) = FALSE
            THEN
                res <-- peopleinfo_set_weight(uu, ww)
            ELSE
                res := ERROR
            END
        END;
        
    res <-- idchecker_authorize_floor_robust(uu, ff) =
        BEGIN
            IF
                uu >= 0 & uu <= PEOPLE_LIMIT
                & ff >= 0 & ff <= TOP_FLOOR
//                & ff /: authorized_floors(uu)
//                & !ee.(ee:ELEVATOR => uu /: elevator_people(ee))
//                & uu /: dom(origin_floor)
//                & uu /: dom(destination_floor)
            THEN
                res <-- idchecker_authorize_floor(uu, ff)
            ELSE
                res := ERROR
            END
        END;
        
    res <-- idchecker_revoke_floor_robust(uu, ff) =
        BEGIN
            IF
                uu >= 0 & uu <= PEOPLE_LIMIT
                & ff >= 0 & ff <= TOP_FLOOR
//                & ff: authorized_floors(uu)
//                & !ee.(ee:ELEVATOR => uu /: elevator_people(ee))
//                & uu /: dom(origin_floor)
//                & uu /: dom(destination_floor)
            THEN
                res <-- idchecker_revoke_floor(uu, ff)
            ELSE
                res := ERROR
            END
        END;

    res <-- idchecker_revoke_all_robust(uu) =
        BEGIN
            IF
                uu >= 0 & uu <= PEOPLE_LIMIT
//            & authorized_floors(uu) /= {}
//            & !ee.(ee:ELEVATOR => uu /: elevator_people(ee))
//            & uu /: dom(origin_floor)
//            & uu /: dom(destination_floor)
            THEN
                res <-- idchecker_revoke_all(uu)
            ELSE
                res := ERROR
            END    
        END

 END