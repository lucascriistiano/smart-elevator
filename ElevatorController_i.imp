/* ElevatorController_i
 * Author: Lucas Cristiano
 * Creation date: 27/06/2017
 */

IMPLEMENTATION
    ElevatorController_i

REFINES
    ElevatorController    

SEES
    Elevator_ctx, People_ctx, OperationResult_ctx
    
IMPORTS
    IdChecker, PeopleInfo
    
PROMOTES
    idchecker_check_floor_authorization,
    peopleinfo_query_weight

CONCRETE_VARIABLES
    current_floor_i,
    elevator_weight_i,
    internal_door_state_i,
    floor_door_state_i,
    elevator_people_i,
    choosen_elevator_i,
    origin_floor_i,
    destination_floor_i,
    elevator_floor_sequence
    
INVARIANT
    current_floor_i: ELEVATOR --> FLOOR
    & elevator_weight_i: ELEVATOR --> NAT
    & internal_door_state_i: ELEVATOR --> DOOR_STATE
    & floor_door_state_i: (FLOOR * ELEVATOR) --> DOOR_STATE
    & elevator_people_i: (ELEVATOR * PEOPLE) --> BOOL
    & choosen_elevator_i: (PEOPLE * ELEVATOR) --> BOOL
    & origin_floor_i: (PEOPLE * FLOOR) --> BOOL
    & destination_floor_i: (PEOPLE * FLOOR) --> BOOL
    & elevator_floor_sequence_i: ELEVATOR --> seq(FLOOR)
    
//    & dom(elevator_people) = dom(elevator_people_i)
//    & ran(elevator_people) = ran(ran(elevator_people_i))
    
INITIALISATION
    current_floor_i := ELEVATOR * { GROUND_FLOOR };
    elevator_weight_i := ELEVATOR * { 0 };
    internal_door_state_i := ELEVATOR * { CLOSED };
    floor_door_state_i := (FLOOR * ELEVATOR) * { CLOSED };
    elevator_people_i := (ELEVATOR * PEOPLE) * { FALSE };
    choosen_elevator_i := (PEOPLE * ELEVATOR) * { FALSE };
    origin_floor_i := (PEOPLE * ELEVATOR) * { FALSE };
    destination_floor_i := (PEOPLE * ELEVATOR) * { FALSE };
    elevator_floor_sequence_i := ELEVATOR * { {} }

OPERATIONS
    
    ff, res <-- elev_current_floor(ee) =
        BEGIN
            IF ee >= 0 & ee <= TOP_FLOOR
            THEN
                ff := current_floor_i(ee);
                res := SUCCESS
            ELSE
                ff := 0;
                res := ERROR
            END
        END;
        
    ww, res <-- elev_current_weight(ee) =
        BEGIN
            IF ee >= 0 & ee <= TOP_FLOOR
            THEN
                ww := elevator_weight_i(ee);
                res := SUCCESS
            ELSE
                ww := 0;
                res := ERROR
            END
        END;

    ss, res <-- elev_door_state(ee) =
       BEGIN
            IF ee >= 0 & ee <= TOP_FLOOR
            THEN
                ss := internal_door_state_i(ee);
                res := SUCCESS
            ELSE
                ss := OPEN;
                res := ERROR
            END
        END;

    dir, res <-- elev_direction(ee) =
        BEGIN
            IF ee >= 0 & ee <= TOP_FLOOR
            THEN
                IF elevator_floor_sequence(ee) /= {}
                THEN
                    IF current_floor(ee) > first(elevator_floor_sequence(ee))
                    THEN
                        dir := DOWN
                    ELSIF current_floor(ee) < first(elevator_floor_sequence(ee))
                    THEN
                        dir := UP
                    ELSE
                        dir := NONE
                    END
                    || state := ATTENDING
                ELSE
                    dir := NONE
                    || state := FREE
                END
                || res := SUCCESS
            ELSE
                dir := NONE
                || state := ATTENDING
                || res := ERROR
            END
    
        BEGIN
            IF ee >= 0 & ee <= TOP_FLOOR
            THEN
                dir := elevator_direction_i(ee);
                res := SUCCESS
            ELSE
                dir := UP;
                res := ERROR
            END
        END

//        ;

//    elnum, res <-- elev_call_elevator(call_floor, dest_floor, user) =
//        PRE 
//            call_floor: FLOOR & dest_floor: FLOOR & user: PEOPLE
//            & call_floor /= dest_floor              //pisos de origem e destino sao diferentes
//            & dest_floor: authorized_floors(user)   //o usuario tem permissao para ir para o piso selecionado
//            & user /: dom(choosen_elevator)         //o usuario nao ja chamou elevador
//            & user /: dom(destination_floor)        //o usuario nao ja esta no elevador
//        THEN
//            IF
//                call_floor: FLOOR & dest_floor: FLOOR & user: PEOPLE
//                & call_floor /= dest_floor
//                & dest_floor: authorized_floors(user)
//                & user /: dom(choosen_elevator)
//                & user /: dom(destination_floor)
//            THEN
//                //TODO Decidir melhor elevador para chamar para o usuario
//                // Melhor = (que esteja indo na mesma direcao que a pessoa vai, que chegue ou passe por onde a pessoa vai, que nao ultrapasse o peso com quem esta e com quem vai entrar antes dele)
//                // So pode entrar quem ja chamou o elevador naquele andar e foi direcionado para ele
//
//                //Lista contem onde tem que parar para pegar e deixar as pessoas
//
//                IF call_floor < dest_floor
//                THEN
//                    IF bool(#ee.(ee: ELEVATOR & elevator_direction(ee) = UP & elevator_weight(ee) + people_weight(user) <= WEIGHT_LIMIT)) = TRUE
//                    THEN
//                        ANY ee WHERE ee: ELEVATOR & elevator_direction(ee) = UP & elevator_weight(ee) + people_weight(user) <= WEIGHT_LIMIT
//                        THEN
//                            elevator_stops(ee, UP) := elevator_stops(ee, UP) \/ { call_floor, dest_floor }
//                            || choosen_elevator(user) := ee
//                            || origin_floor(user) := call_floor
//                            || destination_floor(user) := dest_floor
//                            || elnum := ee
//                            || elevator_state(ee) := ATTENDING
//                            || res := SUCCESS
//                        END
//                    ELSE
//                        skip //retorna um elevador qualquer mais proximo que aceite o peso do usuario
//                    END
//                ELSE
//                    skip //coisa semelhante para down
//                END
//            ELSE
//                res := ERROR
//            END
//        END;
//
//
//    res <-- elev_open_door(ee, ff) =
//        PRE
//            ee: ELEVATOR & ff: FLOOR
//            & internal_door_state(ee) = CLOSED     //a porta interna esta fechada
//            & floor_door_state(ff, ee) = CLOSED    //a porta externa esta fechada
//            & current_floor(ee) = ff               //o elevador esta no piso informado
//            & elevator_stops(ee, elevator_direction(ee)) /= {} //existe uma parada pendente na direcao atual
//            & ff: elevator_stops(ee, elevator_direction(ee))   //o andar esta na lista de paradas da direcao atual
//            & !ft.(ft: FLOOR & elevator_direction(ee) = UP & ft: elevator_stops(ee, UP) & ft /= ff => ff < ft)     //a proxima (menor) parada na subida eh naquele andar
//            & !ft.(ft: FLOOR & elevator_direction(ee) = DOWN & ft: elevator_stops(ee, DOWN) & ft /= ff => ff > ft) //a proxima (maior) parada na descida eh naquele andar
//        THEN
//            IF
//                ee: ELEVATOR & ff: FLOOR
//                & internal_door_state(ee) = CLOSED
//                & floor_door_state(ff, ee) = CLOSED
//                & current_floor(ee) = ff
//                & elevator_stops(ee, elevator_direction(ee)) /= {}
//                & ff: elevator_stops(ee, elevator_direction(ee))
//                & !ft.(ft: FLOOR & elevator_direction(ee) = UP & ft: elevator_stops(ee, UP) & ft /= ff => ff < ft)
//                & !ft.(ft: FLOOR & elevator_direction(ee) = DOWN & ft: elevator_stops(ee, DOWN) & ft /= ff => ff > ft)
//            THEN
//                internal_door_state(ee) := OPEN
//                || floor_door_state(ff, ee) := OPEN
//                || elevator_stops(ee, elevator_direction(ee)) := elevator_stops(ee, elevator_direction(ee)) - { min(elevator_stops(ee, elevator_direction(ee))) }
//                || IF (card(elevator_stops(ee, UP)) + card(elevator_stops(ee, DOWN)) - 1) = 0 //se ao remover a parada atual ainda restar alguma parada pendente
//                   THEN
//                       elevator_state(ee) := FREE
//                   ELSE
//                       elevator_state(ee) := ATTENDING
//                   END
//                || res := SUCCESS
//            ELSE
//                res := ERROR
//            END
//        END;
//
//
//     res <-- elev_close_door(ee, ff) =
//        PRE
//            ee: ELEVATOR & ff: FLOOR
//            & internal_door_state(ee) = OPEN        //a porta interna esta aberta
//            & floor_door_state(ff, ee) = OPEN       //a porta externa esta aberta
//            & current_floor(ee) = ff                //o elevador esta no piso informado
//            & elevator_weight(ee) <= WEIGHT_LIMIT   //o peso total do elevador esta dentro do limite
//            & !uu.(uu: elevator_people(ee) => destination_floor(uu) /= ff) //nao tem mais ninguem para descer no andar
//            & !uu.(uu: dom(choosen_elevator) => ((choosen_elevator(uu) = ee & origin_floor(uu) = current_floor(ee)) => uu: elevator_people(ee))) //nao tem mais ninguem para entrar no elevador no andar
//        THEN
//            IF
//                ee: ELEVATOR & ff: FLOOR
//                & internal_door_state(ee) = OPEN
//                & floor_door_state(ff, ee) = OPEN
//                & current_floor(ee) = ff
//                & elevator_weight(ee) <= WEIGHT_LIMIT
//                & !uu.(uu: elevator_people(ee) => destination_floor(uu) /= ff)
//                & !uu.(uu: dom(choosen_elevator) => ((choosen_elevator(uu) = ee & origin_floor(uu) = current_floor(ee)) => uu: elevator_people(ee)))
//            THEN
//                internal_door_state(ee) := CLOSED
//                || floor_door_state(ff, ee) := CLOSED
//                || IF elevator_state(ee) = ATTENDING //se tem pendencias de andares a atender, verifica se precisa alterar a direcao do elevador
//                   THEN
//                       IF elevator_direction(ee) = UP & card(elevator_stops(ee, UP)) = 0 //esta indo para cima mas nao tem mais ninguem para cima
//                       THEN
//                           elevator_direction(ee) := DOWN //altera a direcao atual do elevador
//                       ELSIF elevator_direction(ee) = DOWN & card(elevator_stops(ee, DOWN)) = 0 //esta indo para baixo mas nao tem mais ninguem para baixo
//                       THEN
//                           elevator_direction(ee) := UP   //altera a direcao atual do elevador
//                       END
//                   END
//                || res := SUCCESS
//            ELSE
//                res := ERROR
//            END
//        END;
//
//
//    res <-- elev_enter(ee, uu) =
//        PRE
//            ee: ELEVATOR & uu: PEOPLE
//            & internal_door_state(ee) = OPEN                  //a porta interna esta aberta
//            & floor_door_state(current_floor(ee), ee) = OPEN  //a porta externa esta aberta
//            & uu /: elevator_people(ee)                       //o usuario nao esta dentro do elevador
////            & (elevator_weight(ee) + people_weight(uu)) <= WEIGHT_LIMIT   //peso nao vai ser excedido com o peso do usuario
//            & uu: dom(choosen_elevator)                       //o usuario possui um elevador de entrada cadastrado
//            & choosen_elevator(uu) = ee                       //eh o elevador que foi escolhido para o usuario
//            & uu: dom(origin_floor)                           //o usuario possui um piso de entrada cadastrado
//            & origin_floor(uu) = current_floor(ee)            //esta no piso de entrada do usuario
//        THEN
//            IF
//                ee: ELEVATOR & uu: PEOPLE
//                & internal_door_state(ee) = OPEN
//                & floor_door_state(current_floor(ee), ee) = OPEN
//                & uu /: elevator_people(ee)
//    //            & (elevator_weight(ee) + people_weight(uu)) <= WEIGHT_LIMIT
//                & uu: dom(choosen_elevator)
//                & choosen_elevator(uu) = ee
//                & uu: dom(origin_floor)
//                & origin_floor(uu) = current_floor(ee)
//            THEN
//                elevator_people(ee) := elevator_people(ee) \/ { uu }
//                || elevator_weight(ee) := elevator_weight(ee) + people_weight(uu)
//                || choosen_elevator := { uu } <<| choosen_elevator //remove elevador escolhido para o usuario
//                || origin_floor := { uu } <<| origin_floor
//                || res := SUCCESS
//            ELSE
//                res := ERROR
//            END
//        END;
//
//
//    res <-- elev_exit(ee, uu) =
//        PRE
//            ee: ELEVATOR & uu: PEOPLE
//            & internal_door_state(ee) = OPEN                  //a porta interna esta aberta
//            & floor_door_state(current_floor(ee), ee) = OPEN  //a porta externa esta aberta
//            & uu: elevator_people(ee)                         //o usuario esta dentro do elevador
//            & uu: dom(destination_floor)                      //o usuario possui um destino cadastrado
//            & current_floor(ee) = destination_floor(uu)       //o andar atual eh o destino do usuario
//        THEN
//            IF
//                ee: ELEVATOR & uu: PEOPLE
//                & internal_door_state(ee) = OPEN
//                & floor_door_state(current_floor(ee), ee) = OPEN
//                & uu: elevator_people(ee)
//                & uu: dom(destination_floor)
//                & current_floor(ee) = destination_floor(uu)
//            THEN
//                elevator_people(ee) := elevator_people(ee) - { uu }
//                || elevator_weight(ee) := elevator_weight(ee) - people_weight(uu)
//                || destination_floor := { uu } <<| destination_floor //remove andar destino do usuario
//                || res := SUCCESS
//            ELSE
//                res := ERROR
//            END
//        END;
//
//
//    res <-- elev_go_up(ee) =
//        PRE
//            ee: ELEVATOR
//            & elevator_stops(ee, elevator_direction(ee)) /= {}  //alguem chamou o elevador
//            & elevator_direction(ee) = UP                       //esta indo para cima
//            & min(elevator_stops(ee, UP)) > current_floor(ee)   //a proxima parada eh acima do andar atual
//            & current_floor(ee) < TOP_FLOOR                     //esta abaixo do ultimo piso
//            & internal_door_state(ee) = CLOSED                  //a porta interna esta fechada
//            & floor_door_state(current_floor(ee), ee) = CLOSED  //a porta externa esta fechada
//        THEN
//            IF
//                ee: ELEVATOR
//                & elevator_stops(ee, elevator_direction(ee)) /= {}
//                & elevator_direction(ee) = UP
//                & min(elevator_stops(ee, UP)) > current_floor(ee)
//                & current_floor(ee) < TOP_FLOOR
//                & internal_door_state(ee) = CLOSED
//                & floor_door_state(current_floor(ee), ee) = CLOSED
//            THEN
//                current_floor(ee) := current_floor(ee) + 1
//                || res := SUCCESS
//            ELSE
//                res := ERROR
//            END
//        END;
//
//
//    res <-- elev_go_down(ee) =
//        PRE
//            ee: ELEVATOR
//            & elevator_stops(ee, elevator_direction(ee)) /= {}  //alguem chamou o elevador
//            & elevator_direction(ee) = DOWN                     //esta indo para baixo
//            & max(elevator_stops(ee, DOWN)) < current_floor(ee) //a proxima parada eh abaixo do andar atual
//            & current_floor(ee) > GROUND_FLOOR                  //esta acima do primeiro piso
//            & internal_door_state(ee) = CLOSED                  //a porta interna esta fechada
//            & floor_door_state(current_floor(ee), ee) = CLOSED  //a porta externa esta fechada
//        THEN
//            IF
//                ee: ELEVATOR
//                & elevator_stops(ee, elevator_direction(ee)) /= {}
//                & elevator_direction(ee) = DOWN
//                & max(elevator_stops(ee, DOWN)) < current_floor(ee)
//                & current_floor(ee) > GROUND_FLOOR
//                & internal_door_state(ee) = CLOSED
//                & floor_door_state(current_floor(ee), ee) = CLOSED
//            THEN
//                current_floor(ee) := current_floor(ee) - 1
//                || res := SUCCESS
//            ELSE
//                res := ERROR
//            END
//        END

 END