/* IdChecker_i
 * Author: Lucas Cristiano
 * Creation date: 26/06/2017
 */

IMPLEMENTATION 
    IdChecker_i

REFINES
    IdChecker

SEES
    People_ctx, Elevator_ctx, IdChecker_ctx
    
CONCRETE_VARIABLES
    authorized_floors_i

INVARIANT
    authorized_floors_i: (PEOPLE*FLOOR) --> BOOL
    & !pp.(pp:dom(authorized_floors) => authorized_floors(pp) = ran({pp} <| dom(authorized_floors_i |> {TRUE})))

INITIALISATION
    BEGIN
        VAR pp IN
            pp := 0;
            WHILE pp < PEOPLE_LIMIT DO
                VAR ff IN
                    ff := GROUND_FLOOR;
                    WHILE ff < TOP_FLOOR DO
                        authorized_floors_i(pp,ff) := FALSE;
                        ff := ff + 1
                    INVARIANT ff < TOP_FLOOR
                    VARIANT TOP_FLOOR - ff
                    END 
                END;
                pp := pp + 1
            INVARIANT pp < PEOPLE_LIMIT
            VARIANT PEOPLE_LIMIT - pp
            END
        END
    END

OPERATIONS
    
    res <-- idchecker_check_floor_authorization(uu, ff) =
        BEGIN
            //uu: PEOPLE & ff: FLOOR
            //& uu: dom(authorized_floors)

            VAR aa IN
                aa := authorized_floors_i(uu, ff);
                IF aa = TRUE
                THEN
                    res := AUTHORIZED
                ELSE
                    res := NOT_AUTHORIZED
                END
            END
        END;

    idchecker_authorize_floor(uu, ff) =
        BEGIN
            //uu: PEOPLE & ff: FLOOR
            //& uu: dom(authorized_floors)
            //& ff /: authorized_floors(uu)
            
            authorized_floors_i(uu, ff) := TRUE
        END;

    idchecker_revoke_floor(uu, ff) =
        BEGIN
            //uu: PEOPLE & ff: FLOOR
            //& uu: dom(authorized_floors)
            //& ff: authorized_floors(uu)

            authorized_floors_i(uu, ff) := FALSE
        END;

    idchecker_revoke_all(uu) =
        BEGIN
            //uu: PEOPLE
            //& uu: dom(authorized_floors)
            //& authorized_floors(uu) /= {}

            VAR ff IN
                ff := GROUND_FLOOR;
                WHILE ff < TOP_FLOOR DO
                    authorized_floors_i(uu, ff) := FALSE;
                    ff := ff + 1
                INVARIANT ff < card(FLOOR)
                VARIANT card(FLOOR) - ff
                END
            END
        END

 END